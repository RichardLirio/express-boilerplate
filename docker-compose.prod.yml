
services:
 app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: express-boilerplate-app
    ports:
      - '3333:3333'
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DB=${PG_DB}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SWAGGER_ENABLED=${SWAGGER_ENABLED}
      - SWAGGER_UI_PATH=${SWAGGER_UI_PATH}
    volumes:
      # Volume para desenvolvimento com hot reload
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
    networks:
      - express-boilerplate-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

 postgres:
  container_name: express-boilerplate-pg
  image: postgres
  ports:
    - 5432:5432
  environment:
    POSTGRES_USER: ${PG_USER}
    POSTGRES_PASSWORD: ${PG_PASSWORD}
    POSTGRES_DB: ${PG_DB}
    PGDATA: /data/postgres
  volumes:
    - ./data/pg:/data/postgres
  networks: 
    - express-boilerplate-network
  restart: unless-stopped
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
    interval: 10s
    timeout: 5s
    retries: 5
    start_period: 60s
  deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

networks:
  express-boilerplate-network:
    driver: bridge